/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// ----------------------------------------------------------------------------
// OPTIONS
// ----------------------------------------------------------------------------
options {
  STATIC = false;
  UNICODE_INPUT = true;
  ERROR_REPORTING = true;
  SUPPORT_CLASS_VISIBILITY_PUBLIC = true;
  OUTPUT_DIRECTORY = "src/main/java/edu/utexas/tacc/tapis/search";
}

// ----------------------------------------------------------------------------
// PARSER
// ----------------------------------------------------------------------------

PARSER_BEGIN(SqlParser)
/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package edu.utexas.tacc.tapis.search;

import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;
import java.lang.UnsupportedOperationException;

import org.apache.commons.lang3.StringUtils;
import org.apache.activemq.filter.ConstantExpression;
import org.apache.activemq.util.LRUCache;

/*
 * DO NOTE EDIT
 * DO NOTE EDIT the .java file directly - it is autogenerated from SqlParser.jj
 * DO NOTE EDIT
 * Tapis Sql parser generated by JavaCC
 * Based on JMS Selector Parser from ActiveMQ
 *
 * Map of Sql operators to Tapis operators
 *   =           -> EQ
 *   <>          -> NEQ
 *   <           -> LT
 *   <=          -> LTE
 *   >           -> GT
 *   >=          -> GTE
 *   LIKE        -> LIKE
 *   NOT LIKE    -> NLIKE
 *   BETWEEN     -> BETWEEN
 *   NOT BETWEEN -> NBETWEEN
 *   IN          -> IN
 *   NOT IN      -> NIN
 *
 * NOTES:
 *   - Specifying an escape character for LIKE is not supported.
 *   - String values must be surrounded by single quotes
 *   - Values for BETWEEN must be surrounded by single quotes
 *   - TODO/TBD: Following operations are not supported:
 *      IS NULL, IS NOT NULL
 *      Arithmetic operations (+, -, /, *, mod)
 *      Unary operators (-, NOT)
 */
public class SqlParser
{
  private static final Map<String, Object> cache = Collections.synchronizedMap(new LRUCache<>(100));

  public static TNode parse(String sql) throws UnsupportedOperationException
  {
    // Look for result in the cache
    Object result = cache.get(sql);
    // If result was an exception we are done
    if (result instanceof UnsupportedOperationException) { throw (UnsupportedOperationException) result; }
    // If we have already resolved the string to a node we are done
    else if (result instanceof TNode) { return (TNode) result; }
    else
    {
      // Result not in cache, convert sql string to a TNode
      try
      {
        // Recursive call to continue processing
        TNode node = new SqlParser(sql).parse();
        // Cache the result
        cache.put(sql, node);
        return node;
      }
      catch (UnsupportedOperationException t)
      {
        cache.put(sql, t);
        throw t;
      }
    }
  }

  public static void clearCache() { cache.clear(); }

  private String sql;

  protected SqlParser(String sql)
  {
    this(new StringReader(sql));
    this.sql = sql;
  }

  protected TNode parse() throws UnsupportedOperationException
  {
    // This kicks off execution of our grammar defined below
    // Variable sql contains the string to be processed
    try { return this.GetNode(); }
    catch (Throwable e) { throw new UnsupportedOperationException(sql, e); }
  }

  // ---------------------------------------------------------------------
  // Utility methods used by grammar to build TNode objects
  // ---------------------------------------------------------------------

  // ============================
  // conjunction / disjunction
  // ============================
  private BinaryExpr createOR(TNode l, TNode r)
  {
    return new BinaryExpr("OR", l, r);
  }
  private BinaryExpr createAND(TNode l, TNode r)
  {
    return new BinaryExpr("AND", l, r);
  }
  // ======================
  // equalityExpression()
  // ======================
  private BinaryExpr createEqual(TNode l, TNode r)
  {
    return new BinaryExpr("EQ", l, r);
  }
  private BinaryExpr createNotEqual(TNode l, TNode r)
  {
    return new BinaryExpr("NEQ", l, r);
  }
  // TODO/TBD: IS NULL is not the same as = null
  // TODO/TBD: Do not support IS NULL ?
  private BinaryExpr createIsNull(TNode l)
  {
    return new BinaryExpr("=", l, new Leaf("NULL"));
  }
  // TODO/TBD: IS NOT NULL is not the same as <> null
  // TODO/TBD: Do not support IS NOT NULL ?
  private BinaryExpr createIsNotNull(TNode l)
  {
    return new BinaryExpr("<>", l, new Leaf("NULL"));
  }
  // ======================
  // comparisonExpression()
  // ======================
  private BinaryExpr createGreaterThan(TNode l, TNode r)
  {
    return new BinaryExpr("GT", l, r);
  }
  private BinaryExpr createGreaterThanEqual(TNode l, TNode r)
  {
    return new BinaryExpr("GTE", l, r);
  }
  private BinaryExpr createLessThan(TNode l, TNode r)
  {
    return new BinaryExpr("LT", l, r);
  }
  private BinaryExpr createLessThanEqual(TNode l, TNode r)
  {
    return new BinaryExpr("LTE", l, r);
  }
  private BinaryExpr createLike(TNode l, String s)
  {
    return new BinaryExpr("LIKE", l, new Leaf(s));
  }
  private BinaryExpr createNotLike(TNode l, String s)
  {
    return new BinaryExpr("NLIKE", l, new Leaf(s));
  }
  private BinaryExpr createBetween(TNode l, String low, String high)
  {
    String s = low + "," + high;
    return new BinaryExpr("BETWEEN", l, new Leaf(s));
  }
  private BinaryExpr createNotBetween(TNode l, String low, String high)
  {
    String s = low + "," + high;
    return new BinaryExpr("NBETWEEN", l, new Leaf(s));
  }
  private BinaryExpr createInList(TNode l, List<String> list)
  {
    StringJoiner sj = new StringJoiner(",");
    for (String s : list) { sj.add(s); }
    return new BinaryExpr("IN", l, new Leaf(sj.toString()));
  }
  private BinaryExpr createNotInList(TNode l, List<String> list)
  {
    StringJoiner sj = new StringJoiner(",");
    for (String s : list) { sj.add(s); }
    return new BinaryExpr("NIN", l, new Leaf(sj.toString()));
  }
  // ======================
  // addExpression()
  // TODO/TBD: Do not support numeric operations?
  // ======================
  private BinaryExpr createPlus(TNode l, TNode r)
  {
    return new BinaryExpr("+", l, r);
  }
  private BinaryExpr createMinus(TNode l, TNode r)
  {
    return new BinaryExpr("-", l, r);
  }
  // ======================
  // multExpression()
  // TODO/TBD: Do not support numeric operations?
  // ======================
  private BinaryExpr createMultiply(TNode l, TNode r)
  {
    return new BinaryExpr("*", l, r);
  }
  private BinaryExpr createDivide(TNode l, TNode r)
  {
    return new BinaryExpr("/", l, r);
  }
  private BinaryExpr createMod(TNode l, TNode r)
  {
    return new BinaryExpr("%", l, r);
  }
  // ======================
  // unaryExpression()
  // TODO/TBD: Do not support unary operations?
  // ======================
  private UnaryExpr createNegate(TNode n)
  {
    return new UnaryExpr("-", n);
  }
  private UnaryExpr createNOT(TNode n)
  {
    return new UnaryExpr("NOT", n);
  }
}

// ========================================
// Classes representing nodes in the AST
// ========================================
abstract class TNode { }

// A binary node contains an operator, a left node and a right node
class BinaryExpr extends TNode {
  String op;
  TNode left, right;
  BinaryExpr(String o, TNode l, TNode r)
  {
    op = o;
    left = l;
    right = r;
  }
  public String toString() { return "(" + left + "." + op + "." + right + ")"; }
}

// A unary node contains an operator and a node
class UnaryExpr extends TNode {
  String op;
  TNode node;
  UnaryExpr(String o, TNode n) {op = o; node = n;}
  public String toString()
  {
    if (StringUtils.isBlank(op)) return node.toString();
    else return "." + op + "." + node.toString();
  }
}

// A leaf node contains a value as a string
class Leaf extends TNode {
  String value;
  Leaf(String v) {value = v;}
  public String toString() {return value;}
}

PARSER_END(SqlParser)

// ----------------------------------------------------------------------------
// Tokens
// ----------------------------------------------------------------------------
/* White Space */
SPECIAL_TOKEN :
{
  " " | "\t" | "\n" | "\r" | "\f"
}

/* Comments */
SKIP:
{
  <LINE_COMMENT: "--" (~["\n","\r"])* ("\n"|"\r"|"\r\n") >
}

SKIP:
{
  <BLOCK_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

/* Reserved Words */
TOKEN [IGNORE_CASE] :
{
    <  NOT     : "NOT">
  | <  AND     : "AND">
  | <  OR      : "OR">
  | <  BETWEEN : "BETWEEN">
  | <  LIKE    : "LIKE">
  | <  ESCAPE  : "ESCAPE">
  | <  IN      : "IN">
  | <  IS      : "IS">
  | <  TRUE    : "TRUE" >
  | <  FALSE   : "FALSE" >
  | <  NULL    : "NULL" >
}

/* Literals */
TOKEN [IGNORE_CASE] :
{
    < DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* (["l","L"])? >
  | < HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
  | < OCTAL_LITERAL: "0" (["0"-"7"])* >
  | < FLOATING_POINT_LITERAL:
          (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? // matches: 5.5 or 5. or 5.5E10 or 5.E10
        | "." (["0"-"9"])+ (<EXPONENT>)?              // matches: .5 or .5E10
        | (["0"-"9"])+ <EXPONENT>                     // matches: 5E10
    >
  | < #EXPONENT: "E" (["+","-"])? (["0"-"9"])+ >
  | < STRING_LITERAL: "'" ( ("''") | ~["'"] )*  "'" >
}

TOKEN [IGNORE_CASE] :
{
    < ID : ["a"-"z", "_", "$"] (["a"-"z","0"-"9","_", "$"])* >
}

// ----------------------------------------------------------------------------
// Grammar
// ----------------------------------------------------------------------------
TNode GetNode() :
{
    TNode left=null;
}
{
    left = orExpression() <EOF>
    {
        return left;
    }
}

TNode orExpression() :
{
    TNode left;
    TNode right;
}
{
    left = andExpression()
    (
        <OR> right = andExpression()
        {
            left = createOR(left, right);
        }
    )*
    {
        return left;
    }

}

TNode andExpression() :
{
    TNode left;
    TNode right;
}
{
    left = equalityExpression()
    (
        <AND> right = equalityExpression()
        {
            left = createAND(left, right);
        }
    )*
    {
        return left;
    }
}

TNode equalityExpression() :
{
    TNode left;
    TNode right;
}
{
    left = comparisonExpression()
    (

        "=" right = comparisonExpression()
        {
            left = createEqual(left, right);
        }
        |
        "<>" right = comparisonExpression()
        {
            left = createNotEqual(left, right);
        }
        |
        LOOKAHEAD(2)
        <IS> <NULL>
        {
            left = createIsNull(left);
        }
        |
        <IS> <NOT> <NULL>
        {
            left = createIsNotNull(left);
        }
    )*
    {
        return left;
    }
}

TNode comparisonExpression() :
{
    TNode left, right;
    String low, high, t;
    boolean not;
    ArrayList<String> list;
}
{
    left = addExpression()
    (

            ">" right = addExpression()
            {
                left = createGreaterThan(left, right);
            }
        |
            ">=" right = addExpression()
            {
                left = createGreaterThanEqual(left, right);
            }
        |
            "<" right = addExpression()
            {
                left = createLessThan(left, right);
            }
        |
            "<=" right = addExpression()
            {
                left = createLessThanEqual(left, right);
            }
       |
            <LIKE> t = stringLiteral()
            {
                left = createLike(left, t);
            }
       |
            LOOKAHEAD(2)
            <NOT> <LIKE> t = stringLiteral()
            {
                left = createNotLike(left, t);
            }
        |
            <BETWEEN> low = stringLiteral() <AND> high = stringLiteral()
            {
                left = createBetween(left, low, high);
            }
        |
            LOOKAHEAD(2)
            <NOT> <BETWEEN> low = stringLiteral() <AND> high = stringLiteral()
            {
                left = createNotBetween(left, low, high);
            }
        |
            <IN>
            "("
                t = stringLiteral()
                {
                    list = new ArrayList<>();
                    list.add( t );
                }
                (
                    ","
                    t = stringLiteral()
                    {
                        list.add( t );
                    }

                )*
            ")"
            {
               left = createInList(left, list);
            }
        |
            LOOKAHEAD(2)
            <NOT> <IN>
            "("
                t = stringLiteral()
                {
                    list = new ArrayList<>();
                    list.add( t );
                }
                (
                    ","
                    t = stringLiteral()
                    {
                        list.add( t );
                    }

                )*
            ")"
            {
               left = createNotInList(left, list);
            }

    )*
    {
        return left;
    }
}

TNode addExpression() :
{
    TNode left;
    TNode right;
}
{
    left = multExpr()
    (
        LOOKAHEAD( ("+"|"-") multExpr())
        (
            "+" right = multExpr()
            {
                left = createPlus(left, right);
            }
            |
            "-" right = multExpr()
            {
                left = createMinus(left, right);
            }
        )

    )*
    {
        return left;
    }
}

TNode multExpr() :
{
    TNode left;
    TNode right;
}
{
    left = unaryExpr()
    (
        "*" right = unaryExpr()
        {
            left = createMultiply(left, right);
        }
        |
        "/" right = unaryExpr()
        {
            left = createDivide(left, right);
        }
        |
        "%" right = unaryExpr()
        {
            left = createMod(left, right);
        }

    )*
    {
        return left;
    }
}

TNode unaryExpr() :
{
    String s=null;
    TNode left=null;
}
{
    (
        LOOKAHEAD( "+" unaryExpr() )
        "+" left=unaryExpr()
        |
        "-" left=unaryExpr()
        {
            left = createNegate(left);
        }
        |
        <NOT> left=unaryExpr()
        {
            left = createNOT(left);
        }
        |
        left = primaryExpr()
    )
    {
        return left;
    }

}

// For literals and <ID> this is the bottom for recursion
// A single sql of "a = 'b'" ends up here and calls idAsUnary
TNode primaryExpr() :
{
    TNode left=null;
}
{
    (
        left = literal()
        |
        left = idAsUnary()
        |
        "(" left = orExpression() ")"
    )
    {
        return left;
    }
}

Leaf literal() :
{
    Token t;
    String s;
    Leaf left=null;
}
{
    (
        (
            s = stringLiteral()
            {
                left = new Leaf(s);
            }
        )
        |
        (
            t = <DECIMAL_LITERAL>
            {
                left = new Leaf(ConstantExpression.createFromDecimal(t.image).toString());
            }
        )
        |
        (
            t = <HEX_LITERAL>
            {
                left = new Leaf(ConstantExpression.createFromHex(t.image).toString());
            }
        )
        |
        (
            t = <OCTAL_LITERAL>
            {
                left = new Leaf(ConstantExpression.createFromOctal(t.image).toString());
            }
        )
        |
        (
            t = <FLOATING_POINT_LITERAL>
            {
                left = new Leaf(ConstantExpression.createFloat(t.image).toString());
            }
        )
        |
        (
            <TRUE>
            {
                left = new Leaf("TRUE");
            }
        )
        |
        (
            <FALSE>
            {
                left = new Leaf("FALSE");
            }
        )
        |
        (
            <NULL>
            {
                left = new Leaf("NULL");
            }
        )
    )
    {
        return left;
    }
}

String stringLiteral() :
{
    Token t;
    StringBuilder rc = new StringBuilder();
    boolean first=true;
}
{
    t = <STRING_LITERAL>
    {
        // Decode the string value.
        String image = t.image;
        for( int i=1; i < image.length()-1; i++ ) {
            char c = image.charAt(i);
            if( c == '\'' )
                i++;
               rc.append(c);
        }
        return rc.toString();
    }
}

UnaryExpr idAsUnary() :
{
    Token t;
}
{
    t = <ID>
    {
      return new UnaryExpr("", new Leaf(t.image));
    }
}
